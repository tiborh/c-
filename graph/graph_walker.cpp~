#include "graph_walker.h"

static void graph_walker::walker_wrapper(graph maze,const char* starting_point) {
    map<string,path> paths = map<string,path>();
    path starting_path = path();
    walker(maze, paths, starting_path, maze.find_point(starting_point));
    for (map<string,path>::iterator it = paths.begin(); it != paths.end(); ++it)
      cout << it->first << ":\n" << it->second;
  }

static void graph_walker::walker(graph maze, std::map<std::string,path>& paths, path spath, point* spoint) {
    assert(!spoint->is_visited());
    spoint->visit();
    for(std::map<std::string,route>::iterator it=spoint->routes_out.begin();
	it != spoint->routes_out.end(); ++it) {
      if (!it->is_trodden()) {
	it->tread();
	if (!it->get_to()->is_visited()) {
	  spath.add_route(&*it);
	  walker(maze,paths,spath,it->to);
	}
      }
    }
    if (spath.size() > 1) {
      string key = string(spath.get_first_id());
      key.append("_");
      key.append(spath.get_last_id());
      paths[key] = spath;
    }
  
  }
